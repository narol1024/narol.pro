---
title: 从Web前端开发角度看《Webkit技术内幕》
lang: zh-CN
date: 2024-04-20
excerpt: 本文是从Web前端开发者的角度包括在阅读过程中的一些总结笔记，其中可能会包括直接搬运原文的文字，但也尽量去多一些自己的思考和总结。
categories:
  - 技术
---

## Webkit 的前世今生

1998，由 KDE 开源社区主导，苹果公司参与的网页渲染引擎 KHTML 一切推动浏览器的发展，但逐渐的 KHTML 开发者跟苹果公司的工程师有一些讽分歧，最终苹果公司从 KHTML 中 fork 代码出来，成立了新的项目-Webkit。

2005 年，苹果公司将 Safari 浏览器的 Webkit 内核作为开源项目进行发布。

2008 年，Google 公司以这个内核创建了一个新的浏览器项目 Chromium，该浏览器是一个开源的试验场，包括很多新的技术，而 Chrome 浏览器则是选择了 Chromium 浏览器的稳定版本进行发布，面向普通用户。

2010 年，苹果公司发布了 Webkit2，一个明显的优化是多进程架构，而这个架构最早是在 Chromium 被使用。

2013 年，Google 从 Webkit 代码中 fork 出了新项目，至此 Blink 浏览器内核诞生，并引入了一些创新技术。

此后，国内外的一些浏览器厂商以 Chromium 的内核版本进行开发，例如 360 浏览器，Opera 浏览器等。

### 一个需要考证点

> 文章提到“一个更为胆大更为激进的想法就是将 DOM 树引入 JavaScript 引擎中。由前面的介绍可以看到，目前 DOM 和 JavaScript 引擎是分开的，这意味着 JavaScript 引擎访问 DOM 树需要较高的代价。”，那目前 DOM 树在哪个进程吗？

目前还没有将 DOM 树引入到 Javascript 引擎，个人认为可能出于以下的考虑：

- **职责分离**: JavaScript 引擎的职责是解析和执行 JavaScript 代码，而渲染进程则是负责页面的渲染，包括布局、绘制和合成。
- **安全性**: 在浏览器的多进程架构中，渲染进程通常是沙箱化的，这意味着它被限制在一个受限的环境中运行，减少了恶意代码造成的危害。如果 DOM 直接由 JavaScript 引擎管理，它可能会更容易受到攻击和漏洞的影响。
- **性能**:通过在渲染进程中管理 DOM，浏览器可以更有效地进行多任务处理，比如在一个线程中执行 JavaScript，同时在另一个线程中进行页面布局和绘制。这样的并行处理能更好地利用现代多核 CPU 的性能，提高页面加载和交互的速度。
- **通用性**: DOM 是 Web 标准的一部分，而不是 JavaScript 语言的一部分。Web 浏览器需要支持多种类型的代码（包括 HTML、CSS、JavaScript 等），所以 DOM 作为这些技术通用的部分，应该独立于任何单一脚本语言存在，因此 DOM 树的操作不应该局限 Javascript 引擎，也可以支持其他语言，譬如 WebAssembly。

尽管如此，Blink 内核使用的 V8 bindings 技术 让 Javacript 和 C++之间能够高效的互相调用，并且也有一些能够提升 Javascript 引擎访问/操作 DOM 树效率的优化方案：

- 出现了 Virtual DOM 技术，将用户视图层变化产生的 DOM 操作最小化，减少不必要的 DOM 操作。
- 减少页面的重绘或重排。
- 减少 CSS 样式的选择器的复杂性，可以考虑使用原子化的 css 方案，例如`tailwindcss`
